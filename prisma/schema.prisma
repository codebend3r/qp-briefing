generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Actions {
  id          Int         @id @default(autoincrement())
  userId      Int
  type        ActionType
  description String
  created_at  DateTime    @default(now())
  referrer    String?
  publication Publication @default(ipolitics)
  User        User        @relation(fields: [userId], references: [id])
}

model AdTracking {
  id          Int      @id @default(autoincrement())
  adId        String
  type        AdAction
  description String
  referrer    String?
  created_at  DateTime @default(now())
}

model AllowedDomain {
  id          Int         @id @default(autoincrement())
  clientName  String
  domainName  String
  publication Publication @default(ipolitics)

  @@unique([domainName, publication])
}

model IpUser {
  id          Int         @id @default(autoincrement())
  clientName  String
  ipHigh      String
  ipLow       String
  publication Publication @default(ipolitics)
}

model Permission {
  id           Int            @id @default(autoincrement())
  name         PermissionName @default(can_read_polling)
  Subscription Subscription[] @relation("PermissionToSubscription")
}

model Prediction {
  id         String   @id
  userId     Int
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime
  User       User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id               Int                    @id @default(autoincrement())
  stripeId         String                 @unique
  currentPeriodEnd DateTime
  quantity         Int
  status           String
  name             String                 @default("")
  ownerId          Int?
  owner            User?                  @relation(fields: [ownerId], references: [id])
  users            UsersOnSubscriptions[]
  permissions      Permission[]           @relation("PermissionToSubscription")
}


model User {
  id                 Int                    @id @default(autoincrement())
  email              String?                @unique
  created_at         DateTime               @default(now())
  updated_at         DateTime?
  magicId            String?                @unique
  stripeId           String?                @unique
  role               String?
  sendGridId         String?                @unique
  emailVerified      DateTime?
  image              String?
  name               String?
  accounts           Account[]
  actions            Actions[]
  prediction         Prediction[]
  sessions           Session[]
  ownedSubscriptions Subscription[]
  subscriptions      UsersOnSubscriptions[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UsersOnSubscriptions {
  userId         Int
  subscriptionId Int
  role           String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, subscriptionId])
}

enum ActionType {
  login
  pageview
  logout
  click
  articleview
  subscription
  lockout
  share
  offer
}

enum AdAction {
  adload
  adclick
}

enum PermissionName {
  can_read_news
  can_read_polling
  can_read_intel
  can_read_money_report
  can_read_comms_report
  can_read_all_reports
  can_read_afn_report
  can_read_qpb
}

enum Publication {
  qpb
  ipolitics
}
